% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutate-helper.R
\name{.size_compare}
\alias{.size_compare}
\alias{more_than}
\alias{less_than}
\alias{emerged}
\alias{vanished}
\title{Get more_than, less_than, emerged or vanished entities from a data frame.}
\usage{
.size_compare(
  df,
  group_by,
  idents,
  id,
  fun,
  compare = ".n",
  split_by = NULL,
  order = "desc(sum)",
  subset = NULL,
  return_type = c("uids", "ids", "subdf", "df", "interdf"),
  include_zeros = FALSE
)

more_than(
  df = ".",
  group_by,
  idents,
  id,
  subset = NULL,
  split_by = NULL,
  compare = ".n",
  return_type = c("uids", "ids", "subdf", "df", "interdf"),
  order = "desc(sum)",
  include_zeros = FALSE
)

less_than(
  df = ".",
  group_by,
  idents,
  id,
  subset = NULL,
  split_by = NULL,
  compare = ".n",
  return_type = c("uids", "ids", "subdf", "df", "interdf"),
  order = "desc(sum)",
  include_zeros = FALSE
)

emerged(
  df = ".",
  group_by,
  idents,
  id,
  subset = NULL,
  split_by = NULL,
  compare = ".n",
  return_type = c("uids", "ids", "subdf", "df", "interdf"),
  order = "desc(sum)",
  include_zeros = FALSE
)

vanished(
  df = ".",
  group_by,
  idents,
  id,
  subset = NULL,
  split_by = NULL,
  compare = ".n",
  return_type = c("uids", "ids", "subdf", "df", "interdf"),
  order = "desc(sum)",
  include_zeros = FALSE
)
}
\arguments{
\item{df}{The data frame}

\item{group_by}{The column name in the data frame to group the entities.
It could be a quoted string or a bare variable, and defines the groups of entities
for comparison.}

\item{idents}{The groups of entities to compare (values in \code{group_by} column).
Either length 1 (\code{ident_1}) or length 2 (\code{ident_1} and \code{ident_2}).
If length 1, the rest of the cells with non-NA values in \code{group_by} will
be used as \code{ident_2}.}

\item{id}{The column name in data frame to mark the entities for the same group.}

\item{fun}{The way to compare between groups. Either \code{"more_than"},
\code{"less_than"}, \code{"emerged"} or \code{"vanished"}.}

\item{compare}{Either a (numeric) column name (i.e. \code{Count})
in data frame to compare between groups, or \code{.n} to compare the
number (count) of entities in each group.
If a column name is given, only the first value of the entities from the same \code{id}
will be used. So make sure that the values are the same for each group (\code{id}).}

\item{split_by}{A column name in data frame to split the entities.
Each comparison will be done for each split in this column.}

\item{order}{An expression to order the intermediate data frame before returning
the final result. Default is \code{NULL}. It does not work for \code{subdf} and \code{df}.}

\item{subset}{An expression to subset the cells, will be passed to
\code{dplyr::filter()}. Default is \code{NULL} (no filtering).}

\item{return_type}{The type of the returned value. Default is \code{uids}.
It could be one of
\itemize{
\item \code{uids}: return the unique ids of the selected entities
\item \code{ids}: return the ids of all entities in the same order as in \code{df}, where the
non-selected ids will be \code{NA}
\item \code{subdf}: return a subset of \code{df} with the selected entities
\item \code{df}: return the original \code{df} with a new logical column \code{.selected} to mark
the selected entities
\item \code{interdf}: return the intermediate data frame with the id column, \code{ident_1},
\code{ident_2}, \code{predicate}, \code{sum}, \code{diff} and the split_by column if provided.
}}

\item{include_zeros}{Whether to include the zero entities in the other group for
\code{more_than} and \code{less_than} comparisons. Default is \code{FALSE}.
By default, the zero entities will be excluded, meaning that the entities must
exist in both groups to be selected.}
}
\value{
Depending on the \code{return_type}, the function will return different values.
\itemize{
\item \code{uids}: a vector of unique ids of the selected entities
\item \code{ids}: a vector of ids of all entities in the same order as in \code{df}, where the
non-selected ids will be \code{NA}
\item \code{subdf}: a subset of \code{df} with the selected entities
\item \code{df}: the original \code{df} with a new logical column \code{.selected} to mark the selected
entities
\item \code{interdf}: the intermediate data frame with the id column, \code{ident_1}, \code{ident_2},
\code{predicate}, \code{sum}, and \code{diff} and the split_by column if provided.
}
}
\description{
\itemize{
\item \code{more_than}: Select entities that have more counts in the first group than the second group.
\item \code{less_than}: Select entities that have less counts in the first group than the second group.
\item \code{emerged}: Select entities that have counts in the first group but not in the second group.
\item \code{vanished}: Select entities that have counts in the second group but not in the first group.
}
}
\examples{
df <- data.frame(
    id = c("A", "A", "A", "B", "B", "B", "C", "C", "D", "D"),
    group = c("G1", "G1", "G2", "G1", "G2", "G2", "G1", "G2", "G1", "G2"),
    count = rep(1, 10),
    split = c("S1", "S2", "S1", "S1", "S2", "S1", "S1", "S2", "S1", "S2")
)
more_than(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "uids")
more_than(df, group_by = group, idents = c("G1", "G2"), id = id, compare = ".n",
  return_type = "uids")
more_than(df, group_by = group, split_by = split, idents = c("G1", "G2"), id = id,
  compare = count, return_type = "ids")
more_than(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "subdf")
more_than(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "ids")
more_than(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "interdf")
more_than(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "df")
more_than(df, group_by = group, idents = c("G1", "G2"), id = id,
  return_type = "uids", subset = id \%in\% c("A", "B"))
dplyr::mutate(df, selected = more_than(group_by = group, idents = c("G1", "G2"),
  id = id, compare = count, return_type = "ids"))
less_than(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "uids")
emerged(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "uids", order = sum)
vanished(df, group_by = group, idents = c("G1", "G2"), id = id, compare = count,
  return_type = "uids")
}
